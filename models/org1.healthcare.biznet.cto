/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org1.healthcare.biznet

//Vishal
asset RequestLabReport identified by requestID {
  --> TestLab toLab
  o String doctorID
  o String patientID
  o Boolean authorized
  o String requestID
  o String requestTime
  o String message
}

asset Appointment identified by appointmentId{
  o String appointmentId
  o String appointmentTime
  o Boolean completed default=false
  o Integer slot
  --> Patient byPatient
  --> Doctor forDoctor
}

asset PatientReport identified by reportId {
  o String reportId
  --> Patient ownerPatient
  --> Doctor creatingDoctor
  o String reportMessage //patient and doctor decide this during appointment
}

asset Prescription identified by receiptId {
  o String receiptId
  --> Patient forPatient
  --> Doctor byDoctor
  --> Pharmacy toPharmacy
  o String PrescriptionText
  o Boolean completed default=false
}

asset LabReport identified by reportID {
  o String reportID
  o String report
  --> Patient patient
  --> TestLab lab
  --> Doctor doctor optional
}

asset ReassignReportRequest identified by RequestId {
  o String RequestId
  o String newDoctor
  --> Doctor oldDoctor
  --> PatientReport report
  --> Patient patientId
}


asset ShareReport identified by shareId{
  o String shareId
  o String reportId
  --> Participant sharedTo
  o Boolean isRevoked
  o DateTime sharedOn
  o DateTime expiresOn
  o ParticipantType participantType default="Doctor"
  o String ownerId
  o String reportMessage
}

asset DoctorSchedule identified by doctorSchedule {
  o String doctorSchedule
  o String doctorId
  o DateTime scheduleDate
  o String[] patientSlot
}

asset ChangeDoctorHelperState identified by stateId {
  o String stateId
  o String PatientId
  o String newDoctorId
  --> PatientReport Report
}

enum ReportType { // Not in Use currently can be removed later if not found any use
  o DoctorReport
  o LabReport
  o Prescription
}

enum ParticipantType { // Not in Use currently can be removed later if not found any use
  o Doctor
  o Patient
}

participant Patient identified by PatientId extends Participant{
  o String PatientId
  o String Name
  o Integer Age default=18 range=[0,120]
  o String Address
  o String phoneNumber regex=/([0-9]{10}|[0-9]{5})/
}

participant Doctor identified by DoctorId extends Participant{
  o String DoctorId
  o String Name
  o Integer Age default=18 range=[0,120]
  o String Address
  o String phoneNumber regex=/([0-9]{10}|[0-9]{5})/
  --> Hospital employedBy
}

participant Hospital identified by HospitalId {
  o String HospitalId
  o String Name
}

participant Pharmacy identified by pharmacyId {
  o String pharmacyId
  o String pharmacyName
}

participant TestLab identified by labId {
  o String labId
  o String labName
}

//Vishal
transaction ReqLabReport {
  --> Doctor fromDoctor
  o String appointmentID
  o String PatientId
  o String LabID
  o String message
}

transaction CreateAppointment { //Creates asset Appointment with DoctorId and PatientId
  o String forDoctor
  o String byPatient
  o DateTime scheduleDate

}

transaction DoctorAvailability{
  o String Doctor
  o DateTime scheduleDate
}

transaction ResolveAppointment { // Creates PatientReport and Prescription
  --> Appointment appointment
  o String doctorId
  o String reportMessage
  o String PrescriptionText
  o String pharmacyId
}

transaction ProcessPrescription {
  --> Prescription toProcessPrescription
  o String patientId
  o String doctorId
  o String pharmacyId
}

transaction ProcessLabReportRequest {
  --> RequestLabReport labReportRequest
  o String patientID
}

transaction GenerateLabReport {
  o String TestsReport
  o String DoctorId optional
  o String PatientId
  o String LabId
  o String labReportRequestID
}

// Request doctor change intiated by doctor
transaction RequestDoctorChange {
  o String reqId
  o String reportId
  o String newDoctor
  --> Doctor byDoctor
}

// Approves or denies doctor requests for change in doctor
transaction ApproveRequestDoctorChange {
  o Boolean approve default=false
  --> ReassignReportRequest toReassignRequest
  --> Patient byPatient
}


transaction Share {
  o String reportId
  o String shareId
  o String sharedWithId
  o String ownerId
  o Integer numberOfDays default=10
  o ParticipantType participantType default="Doctor"
  o Boolean isRevoking default=false
}

transaction ChangeOfDoctor {
  --> Patient byPatient
  o String ReportId
  o String newDoctorId
}

transaction ChangeOfDoctorApproval {
  --> Doctor newDoctor
  --> ChangeDoctorHelperState helperState
  o Boolean Approval
}

/*
* Events go here
*/

event AppointmentEvent {
  o Appointment new_appointment
  o String forDoctor
  o String byPatient
}

event DoctorAvailabilityEvent {
  o String Doctor
  o String Message
}

//Vishal
event RequestLabReportEvent {
  o RequestLabReport new_request
  o String fromDoctor
  o String toLab
  o String forPatient
}

event ChangeOfDoctorEvent {
  o String newDoctorId
  o String PatientId
  o String Message
}

event ChangeOfDoctorApprovalRejectedEvent {
  --> Patient RejectedPatient
  o String DoctorId
  o String Message
}

/*
* More things go here
*/
